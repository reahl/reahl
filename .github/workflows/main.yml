# This is a basic workflow to help you get started with Actions

name: CI

# Controls when the action will run. 
on:
  # Triggers the workflow on push or pull request events but only for the master branch
  push:
    branches: [ master ]
  pull_request:
    branches: [ master ]

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  # This workflow contains a single job called "build"
  build:
    # The type of runner that the job will run on. Must be linux if you want to use Services/docker
    runs-on: ubuntu-20.04
#    container: #if you want the job to tun inside a container inside the runs-on machine
#      image: ubuntu:20.04 #needs docker container to get to postgres via docker network
    env: #cant set variables base on other vars here
      EMAIL: "noone@example.org"
      DEBFULLNAME: "Github Runner"
      DISPLAY: ":99.0"
      REAHL_TEST_CONNECTION_URI: "sqlite:///./db/reahl.db"
#      REAHL_TEST_CONNECTION_URI: "postgresql://reahl:reahl@localhost:54321/reahl"
      #REAHL_TEST_CONNECTION_URI: "postgresql://reahl:reahl@database/reahl"
      PGPASSWORD: "postgres"
    services:
      database:
        image: postgres:12.3
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: postgres
          POSTGRES_HOST_AUTH_METHOD: trust
        ports:
          - "54321:5432"
        # Set health checks to wait until postgres has started
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5


    strategy:
      matrix:
        os: [ubuntu-20.04]
        #python-version: ['3.6', '3.7', '3.8']
        python-version: ['3.6']

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - uses: actions/checkout@v2
      - uses: actions/setup-python@v2
        with:
          python-version: ${{ matrix.python-version }}

      - name: Install Basic apt dependencies
        run: sudo apt-get install openssh-client dpkg-dev bzr git firefox firefox-geckodriver

      - name: Install For compiling pip installed extensions we use
        run: sudo apt-get install  python3-virtualenv python-dev gcc cython libxml2-dev libxslt-dev libsqlite3-0 sqlite3 postgresql-server-dev-all zlib1g-dev libjpeg62-dev libfreetype6-dev liblcms2-dev libmysqlclient-dev

        # - phantomjs  # for reference... not allowed in apt addon
      - name: Install For testing of reahl-component
        run: sudo apt-get install graphviz

      - name: Debug info
        run: |
          git --version
          firefox --version
          geckodriver --version
          gpg --version

      - name: Setup environment
        run: |
          echo "HOME=${PWD}" >> $GITHUB_ENV
          echo "$HOME/bin" >> $GITHUB_PATH
          echo "REAHLWORKSPACE=$HOME" >> $GITHUB_ENV
          echo "DEBEMAIL=$EMAIL" >> $GITHUB_ENV
          travis/setupTestGit.sh
          travis/configurePip.sh
        # travis/createTestSshKey.sh
        # travis/createTestGpgKey.sh

      - name: Setup reahl
        run: |
          python3 -m venv .reahl_env
          source .reahl_env/bin/activate
          pip install --upgrade pip
          mkdir -p $REAHLWORKSPACE/.reahlworkspace/dist-egg
          python scripts/bootstrap.py --script-dependencies
          CFLAGS="-O0" python scripts/bootstrap.py --pip-installs
          reahl createdb -U postgres reahl-web/etc
          reahl createdbuser -U postgres reahl-web/etc
          reahl setup -sX -- develop -N

      - name: Run tests
        uses: GabrielBB/xvfb-action@v1
        with:
          run: |
            (reahl build -sdX || (EXITCODE=$?; shred -f $HOME/.gnupg/*; exit $EXITCODE))
            (reahl shell -sdXg tox && (EXITCODE=$?; shred -f $HOME/.gnupg/*; exit $EXITCODE))


      # Runs a single command using the runners shell
      - name: Run a one-line script
        run: echo Hello, world!

      # Runs a set of commands using the runners shell
      - name: Run a multi-line script
        run: |
          echo Add other actions to build,
          echo test, and deploy your project.
