# This is a basic workflow to help you get started with Actions

name: CI

# Controls when the action will run. 
on:
  # Triggers the workflow on push or pull request events but only for the master branch
  push:
    branches: [ master ]
  pull_request:
    branches: [ master ]

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  build:
    runs-on: ubuntu-20.04
    steps:
      - uses: actions/checkout@v2

      - name: Prepare
        id: prep
        run: |
          TAG=$(echo $GITHUB_SHA | head -c7)
          IMAGE="reahl-dev"
          echo ::set-output name=tagged_image::${IMAGE}:${TAG}
          echo ::set-output name=tag::${TAG}

      - name: Set up Docker Buildx
        id: buildx
        # Use the action from the master, as we've seen some inconsistencies with @v1
        # Issue: https://github.com/docker/build-push-action/issues/286
        uses: docker/setup-buildx-action@master
        # Only worked for us with this option on
        with:
          install: true

      - name: Cache Docker layers
        uses: actions/cache@v2
        with:
          path: /tmp/.buildx-cache
          # Key is named differently to avoid collision
          key: ${{ runner.os }}-multi-buildx-${{ github.sha }}
          restore-keys: |
            ${{ runner.os }}-multi-buildx

      - name: Build build image and wheels
        uses: docker/build-push-action@v2
        with:
          context: .
          builder: ${{ steps.buildx.outputs.name }}
          file: Dockerfile
          # Set the desired build target to python-install (in Dockerfile) it will produce built wheels
          target: build-image
          push: false
          tags: ${{ steps.prep.outputs.tagged_image }}
          cache-from: type=local,src=/tmp/.buildx-cache
          # Note the mode=max here
          # More: https://github.com/moby/buildkit#--export-cache-options
          # And: https://github.com/docker/buildx#--cache-tonametypetypekeyvalue
          cache-to: type=local,mode=max,dest=/tmp/.buildx-cache-new

      - name: Extract built wheels
        run: |
          mkdir -p /tmp/wheels
          docker run --rm -v /tmp/wheels:/tmp/wheels ${{ steps.prep.outputs.tagged_image }} cp -a /home/developer/.reahlworkspace/dist-egg/* /tmp/wheels
          ls -laR /tmp/wheels

      - name: Upload built wheels
        uses: actions/upload-artifact@v2
        with:
          name: wheels
          path: /tmp/wheels

      - name: Move cache
        run: |
          rm -rf /tmp/.buildx-cache
          mv /tmp/.buildx-cache-new /tmp/.buildx-cache

  test:
    needs: build
    runs-on:  ubuntu-20.04
    container:
      image:  ubuntu:20.04
    services:
      postgres:
        image: postgres:12.3
        env:
          POSTGRES_PASSWORD: reahl
          POSTGRES_USER: developer
        # Set health checks to wait until postgres has started
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
      - uses: actions/checkout@v2

      - name: Download wheels
        uses: actions/download-artifact@v2
        with:
          name: wheels
          path: ~/.reahlworkspace/dist-egg
      - name: check wheels
        run: ls -la /tmp/wheels

      - name: Setup python
        uses: actions/setup-python@v2
        with:
          python-version: 3.8
      - name: Check docker images
        run: |
          pwd
          ./scripts/installDebs.sh
          ./scripts/setupDevEnv.sh
          cat ~/.pip/pip.conf
          pip install --pre reahl[dev]
          reahl createdb -U postgres reahl-web/etc
          (reahl shell -sdXg tox && (EXITCODE=$?; shred -f $HOME/.gnupg/*; exit $EXITCODE))
